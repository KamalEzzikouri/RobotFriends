{"version":3,"sources":["Component/images/robot.svg","reducers/reducers.js","store.js","Actions/constants.js","serviceWorker.js","Component/Card.js","Component/CardList.js","Component/Header/_header.js","Component/Search/SearchBox.js","Component/Scroll/Scroll.js","containers/App.js","Actions/Actions.js","index.js"],"names":["module","exports","intialStateSearch","searchField","intialStateRobots","isPending","robots","error","rootreducer","combineReducers","searchRobots","state","action","type","Object","assign","payload","requestRobots","middleware","Thunk","store","createStore","composeWithDevTools","applyMiddleware","Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","href","CardList","cardArray","map","user","i","key","Header","logo","SearchBox","searchfield","searchchange","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","document","title","onsearchchange","filterrebots","filter","robot","toLowerCase","includes","Component","connect","dispatch","event","target","value","fetch","mode","then","response","json","data","catch","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.73cf3f98.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robot.09e21f4d.svg\";","\r\nimport { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n\r\n} from '../Actions/constants'\r\n\r\nconst intialStateSearch  = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialStateSearch, action={})  =>{\r\n\r\n    switch (action.type) {\r\n        \r\n        case CHANGE_SEARCH_FIELD:\r\n            // eslint-disable-next-line\r\n            // return {... state, searchField:action.payload};\r\n            return Object.assign({}, state, {searchField:action.payload})\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst intialStateRobots ={\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n\r\n}\r\n\r\nexport const requestRobots = (state=intialStateRobots, action = {}) =>{\r\n    switch (action.type) {\r\n\r\n        case REQUEST_ROBOTS_PENDING:\r\n\r\n            return {...state, isPending: true }\r\n\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n\r\n            return {...state, robots: action.payload, isPending: false}\r\n\r\n        case REQUEST_ROBOTS_FAILED:\r\n\r\n            return {...state, error: action.payload, isPending: false}\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, applyMiddleware, combineReducers } from 'redux';\r\n\r\nimport Thunk from 'redux-thunk';\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport { searchRobots, requestRobots } from './reducers/reducers';\r\n\r\n\r\nconst rootreducer = combineReducers({ searchRobots, requestRobots });\r\n\r\nconst middleware = [Thunk]\r\n\r\nconst store = createStore(\r\n    rootreducer, \r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n    \r\n    )\r\n\r\n\r\nexport default store;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS= 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nimport '../styles/style.css'\r\n\r\n\r\nfunction Card({name, email, id} ) {\r\n\r\n    return (\r\n\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img  alt='Robots' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>\r\n                    {name} \r\n                </h2>\r\n                <p>\r\n                  <a className='Hyp' href = {`mailto: ${email}`} > \r\n                      Email Me \r\n                  </a> \r\n                </p>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\n\r\n\r\n\r\nfunction CardList({robots}){\r\n\r\n    const cardArray= robots.map((user, i) => {\r\n        return (\r\n                <Card \r\n                    key={i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                />\r\n        )\r\n\r\n    })\r\n\r\n    return(\r\n\r\n        <div>\r\n            \r\n            {cardArray}\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\nimport '../StylesC/header.css'\r\nimport logo from '../images/robot.svg';\r\n\r\nfunction Header (){\r\n    return (\r\n\r\n        <div>\r\n               \r\n            <h1>\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />  \r\n            <span className='H1-header'>\r\n                     Robot Friends\r\n            </span>\r\n            </h1>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\n\r\nfunction SearchBox ({searchfield, searchchange}){\r\n\r\n    return (\r\n\r\n        <div className='pa2'>\r\n            <input  className='pa3 ba b--green bg-lightest-blue'\r\n            type='search'\r\n            placeholder='Search Robots' \r\n            onChange={searchchange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) =>{\r\n\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CardList from '../Component/CardList'\r\nimport Header from '../Component/Header/_header'\r\nimport SearchBox from '../Component/Search/SearchBox';\r\n\r\nimport Scroll from '../Component/Scroll/Scroll'\r\n\r\nimport { setSearchField, requestRobots } from '../Actions/Actions';\r\n\r\n// Title Of The App\r\nconst TITLE = 'Robot Friends'\r\n\r\n/// maps\r\n\r\nconst mapStateToProps = (state) =>{\r\n        return {\r\n            searchField: state.searchRobots.searchField,\r\n            robots: state.requestRobots.robots,\r\n            isPending: state.requestRobots.isPending,\r\n            error: state.requestRobots.error\r\n        }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\r\n        return {\r\n            onsearchchange: (event) => dispatch(setSearchField(event.target.value)),\r\n            onRequestRobots: () => dispatch(requestRobots())\r\n        }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount(){\r\n\r\n        this.props.onRequestRobots();\r\n\r\n            /* Title of The App you can change it from above */\r\n\r\n            document.title = `${ TITLE }`;\r\n    }\r\n\r\n// Old one\r\n    // onsearchchange = (event) => {\r\n        \r\n    //     this.setState({searchfield: event.target.value})\r\n    // }\r\n\r\n    render(){\r\n\r\n        const { searchField, onsearchchange, robots, isPending } = this.props;\r\n        const filterrebots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n\r\n        return isPending ? \r\n        \r\n        <h1> Loading ..... </h1> :\r\n        (\r\n            <div>\r\n                {/* <Helmet>\r\n                    <title>{ TITLE }</title>\r\n                </Helmet> */}\r\n                <Header />\r\n                <div className='tc'>\r\n                    <SearchBox searchchange={onsearchchange}/>\r\n\r\n                    <Scroll>\r\n                        \r\n                    <CardList  robots = {filterrebots}/>\r\n\r\n                    </Scroll>\r\n                </div>\r\n            </div>\r\n    \r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n\r\n} from './constants'\r\n\r\n\r\nexport const setSearchField = (text) =>{\r\n\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n\r\n    dispatch({\r\n        type:REQUEST_ROBOTS_PENDING\r\n    });\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/users', {mode:'cors'})\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}) )\r\n    .catch(error => dispatch( { type: REQUEST_ROBOTS_FAILED, payload: error} ))\r\n}\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './store';\n\nimport './styles/index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './containers/App'\n\nimport 'tachyons'\n\n//middleware\n\n\nReactDOM.render(\n  <React.StrictMode>\n                  <Provider store={store}>\n                             <App />\n                  </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}